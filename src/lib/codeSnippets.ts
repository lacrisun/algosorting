export type AlgorithmName = 'Bubble Sort' | 'Insertion Sort' | 'Selection Sort' | 'Shell Sort' | 'Quick Sort' | 'Merge Sort';

export const pseudoCode: Record<AlgorithmName, string[]> = {
  'Bubble Sort': [
    /* 1*/ "Start Bubble Sort",
    /* 2*/ "for i from 0 to n-2:",
    /* 3*/ "  swapped = false",
    /* 4*/ "  for j from 0 to n-i-2:",
    /* 5*/ "    Compare arr[j] and arr[j+1]",
    /* 6*/ "    if arr[j] > arr[j+1]:",
    /* 7*/ "      swap(arr[j], arr[j+1])",
    /* 8*/ "      swapped = true",
    /* 9*/ "  // Element arr[n-1-i] is sorted",
    /*10*/ "  if not swapped: break",
    /*11*/ "End Bubble Sort",
  ],
  'Insertion Sort': [
    /* 1*/ "Start Insertion Sort",
    /* 2*/ "// Mark arr[0] as sorted",
    /* 3*/ "for i from 1 to n-1:",
    /* 4*/ "  current = arr[i]",
    /* 5*/ "  j = i-1",
    /* 6*/ "  Compare current with arr[j]",
    /* 7*/ "  while j >= 0 and arr[j] > current:",
    /* 8*/ "    arr[j+1] = arr[j] // Shift",
    /* 9*/ "    j = j-1",
    /*10*/ "    Compare current with arr[j]",
    /*11*/ "  arr[j+1] = current // Insert",
    /*12*/ "// Subarray arr[0..i] is sorted",
    /*13*/ "End Insertion Sort",
  ],
  'Selection Sort': [
    /* 1*/ "Start Selection Sort",
    /* 2*/ "for i from 0 to n-2:",
    /* 3*/ "  minIndex = i",
    /* 4*/ "  for j from i+1 to n-1:",
    /* 5*/ "    Compare arr[j] and arr[minIndex]",
    /* 6*/ "    if arr[j] < arr[minIndex]:",
    /* 7*/ "      minIndex = j",
    /* 8*/ "  // Found minimum at minIndex",
    /* 9*/ "  if minIndex != i:",
    /*10*/ "    swap(arr[i], arr[minIndex])",
    /*11*/ "// Element arr[i] is sorted",
    /*12*/ "End Selection Sort",
  ],
  'Shell Sort': [
    /* 1*/ "Start Shell Sort",
    /* 2*/ "Initialize gap sequence (e.g., Knuth's)",
    /* 3*/ "while gap >= 1:",
    /* 4*/ "  // Processing with current gap",
    /* 5*/ "  for i from gap to n-1:",
    /* 6*/ "    temp = arr[i]",
    /* 7*/ "    j = i",
    /* 8*/ "    Compare temp with arr[j-gap]",
    /* 9*/ "    while j >= gap and arr[j-gap] > temp:",
    /*10*/ "      arr[j] = arr[j-gap] // Shift",
    /*11*/ "      j = j - gap",
    /*12*/ "      Compare temp with arr[j-gap]",
    /*13*/ "    arr[j] = temp // Insert",
    /*14*/ "  gap = floor(gap / 3)",
    /*15*/ "End Shell Sort",
  ],
  'Quick Sort': [
    /* 1*/ "Start Quick Sort",
    /* 2*/ "quickSortRecursive(arr, 0, n-1)",
    /* 3*/ "function quickSortRecursive(arr, low, high):",
    /* 4*/ "  if low >= high: return // Base case",
    /* 5*/ "  // Partitioning subarray arr[low..high]",
    /* 6*/ "  pi = partition(arr, low, high)",
    /* 7*/ "  // Pivot arr[pi] is now sorted",
    /* 8*/ "  quickSortRecursive(arr, low, pi-1)",
    /* 9*/ "  quickSortRecursive(arr, pi+1, high)",
    /*10*/ "function partition(arr, low, high):",
    /*11*/ "  pivot = arr[high]",
    /*12*/ "  i = low - 1",
    /*13*/ "  for j from low to high-1:",
    /*14*/ "    Compare arr[j] with pivot",
    /*15*/ "    if arr[j] < pivot:",
    /*16*/ "      i++",
    /*17*/ "      swap(arr[i], arr[j])",
    /*18*/ "  // Place pivot in correct position",
    /*19*/ "  swap(arr[i+1], arr[high])",
    /*20*/ "  return i+1",
    /*21*/ "End Quick Sort",
  ],
  'Merge Sort': [
    /* 1*/ "Start Merge Sort",
    /* 2*/ "mergeSortRecursive(arr, 0, n-1)",
    /* 3*/ "function mergeSortRecursive(arr, l, r):",
    /* 4*/ "  if l >= r: return // Base case",
    /* 5*/ "  m = floor((l+r)/2)",
    /* 6*/ "  // Splitting subarray arr[l..r]",
    /* 7*/ "  mergeSortRecursive(arr, l, m)",
    /* 8*/ "  mergeSortRecursive(arr, m+1, r)",
    /* 9*/ "  // Merging subarrays arr[l..m] and arr[m+1..r]",
    /*10*/ "  merge(arr, l, m, r)",
    /*11*/ "function merge(arr, l, m, r):",
    /*12*/ "  Create temp arrays L[n1], R[n2]",
    /*13*/ "  Copy arr[l..m] to L",
    /*14*/ "  Copy arr[m+1..r] to R",
    /*15*/ "  i=0, j=0, k=l",
    /*16*/ "  while i < n1 and j < n2:",
    /*17*/ "    Compare L[i] and R[j]",
    /*18*/ "    if L[i] <= R[j]:",
    /*19*/ "      arr[k++] = L[i++]",
    /*20*/ "    else:",
    /*21*/ "      arr[k++] = R[j++]",
    /*22*/ "  while i < n1: // Copy remaining L",
    /*23*/ "    arr[k++] = L[i++]",
    /*24*/ "  while j < n2: // Copy remaining R",
    /*25*/ "    arr[k++] = R[j++]",
    /*26*/ "// Subarray arr[l..r] is merged",
    /*27*/ "End Merge Sort",
  ],
};

